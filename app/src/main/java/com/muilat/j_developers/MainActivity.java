/**
 * Created by my computer on 14-Aug-17.
 */

package com.muilat.j_developers;

import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.Loader;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.preference.PreferenceManager;
import android.support.v7.widget.SearchView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.muilat.j_developers.utilities.Developer;
import com.muilat.j_developers.utilities.DeveloperAdapter;
import com.muilat.j_developers.utilities.DeveloperLoader;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<ArrayList<Developer>>, SharedPreferences.OnSharedPreferenceChangeListener{

//    String Github_url_string = "https://api.github.com/search/users?q=location:lagos+language:java";
//    static URL Github_REQUEST_URL;

    public static  Developer current_developer;

    //for flaging if the pref has changed
    private static boolean PREFERENCES_HAVE_BEEN_UPDATED = false;

    SearchView searchView;

    public static String mSearchUsername = "";

    public ProgressBar progressBar;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        progressBar = (ProgressBar) findViewById(R.id.progress_bar);

        ///register onsharedpreferencechangelistener
        PreferenceManager.getDefaultSharedPreferences(this)
                .registerOnSharedPreferenceChangeListener(this);

        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);

        //check if network connection is enabled
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        if(networkInfo != null && networkInfo.isAvailable() &&  networkInfo.isConnected()){
            //network is available go get the data

            /*
             * Ensures a loader is initialized and active. If the loader doesn't already exist, one is
             * created and (if the activity/fragment is currently started) starts the loader. Otherwise
             * the last created loader is re-used.
             */
            getSupportLoaderManager().initLoader(1, null, MainActivity.this);

        }
        else {

            //hide progress bar

            progressBar.setVisibility(View.GONE);
            //internet is not available; make it known
            TextView empty_view = (TextView) findViewById(R.id.empty_view);
            //make it visible
            empty_view.setVisibility(View.VISIBLE);
            empty_view.setText(getString(R.string.no_internet));
            ListView listView = (ListView) findViewById(R.id.list_quake);
            listView.setEmptyView(findViewById(R.id.empty_view));


        }


    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     *
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<ArrayList<Developer>> onCreateLoader(int id, Bundle args) {

        return new DeveloperLoader(this);

    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     *
     * Update the screen with the given develpoers (which was the result of the
     * {@link DeveloperLoader}).
     */

    @Override
    public void onLoadFinished(Loader<ArrayList<Developer>> loader, ArrayList<Developer> data) {
        //hide the progressbar
        progressBar.setVisibility(View.GONE);

        updateUi(data);
    }

    @Override
    public void onLoaderReset(Loader<ArrayList<Developer>> loader) {

        updateUi(new ArrayList<Developer>());
    }








    //update the ui after
    private void updateUi(final ArrayList<Developer> developers) {



        ListView listView = (ListView) findViewById(R.id.list_quake);

        DeveloperAdapter developerAdapter = new DeveloperAdapter(this,developers);
        listView.setAdapter(developerAdapter);

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id){
                //use the position of the item clicked on the listview to
                // get the corresponding url from the developer list
                Developer developer = developers.get(position);

                current_developer = developer;

                Intent developerIntent = new Intent(MainActivity.this, ShowDeveloperActivity.class);

                startActivity(developerIntent);



            }
        });

        //show empty if result is empty
        if(developerAdapter.isEmpty() || developerAdapter==null){
            TextView empty_view = (TextView)findViewById(R.id.empty_view);
            //make it visible
            empty_view.setVisibility(View.VISIBLE);
            listView.setEmptyView(findViewById(R.id.empty_view));
        }



    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.action_settings){

            Intent settingsIntent = new Intent(MainActivity.this, SettingsActivity.class);
            startActivity(settingsIntent);
        }

        return super.onOptionsItemSelected(item);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        final MenuItem searchItem = menu.findItem(R.id.action_search);

        if (searchItem != null) {
            searchView = (SearchView) MenuItemCompat.getActionView(searchItem);
            searchView.setOnCloseListener(new SearchView.OnCloseListener() {
                @Override
                public boolean onClose() {
                    //some operation
                    return  false;
                }
            });
            searchView.setOnSearchClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //some operation
                }
            });
            EditText searchPlate = (EditText) searchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
            searchPlate.setHint("Search Developer");
            View searchPlateView = searchView.findViewById(android.support.v7.appcompat.R.id.search_plate);
            searchPlateView.setBackgroundColor(ContextCompat.getColor(this, android.R.color.transparent));
            // use this method for search process
            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                @Override
                public boolean onQueryTextSubmit(String query) {
                    // use this method when query submitted
                    mSearchUsername = query;
                    progressBar.setVisibility(View.VISIBLE);

                    getSupportLoaderManager().restartLoader(1, null, MainActivity.this);

                    Toast.makeText(MainActivity.this, query, Toast.LENGTH_SHORT).show();
                    return false;
                }

                @Override
                public boolean onQueryTextChange(String newText) {
                    // use this method for auto complete search process
                    mSearchUsername = newText;
                    progressBar.setVisibility(View.VISIBLE);

                    getSupportLoaderManager().restartLoader(1, null, MainActivity.this);

                    return false;
                }
            });
            SearchManager searchManager = (SearchManager) getSystemService(SEARCH_SERVICE);
            searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));

        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public void onBackPressed() {
        if (!searchView.isIconified()) {
            searchView.setIconified(true);
            mSearchUsername = "";
            progressBar.setVisibility(View.VISIBLE);

            getSupportLoaderManager().restartLoader(1, null, MainActivity.this);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        PREFERENCES_HAVE_BEEN_UPDATED = true;

    }

    @Override
    protected void onStart() {
        super.onStart();

        /*
         * If the preferences for location or units have changed since the user was last in
         * MainActivity, perform another query and set the flag to false.
         */
        if (PREFERENCES_HAVE_BEEN_UPDATED) {
            Log.d("MainActivity", "onStart: preferences were updated");
            getSupportLoaderManager().restartLoader(1, null, this);
            PREFERENCES_HAVE_BEEN_UPDATED = false;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        /* Unregister MainActivity as an OnPreferenceChangedListener to avoid any memory leaks. */
        PreferenceManager.getDefaultSharedPreferences(this)
                .unregisterOnSharedPreferenceChangeListener(this);
    }
}
